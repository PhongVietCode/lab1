ARM GAS  C:\Users\phong\AppData\Local\Temp\cckTNfl2.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/main.c"
  18              		.section	.text.MX_GPIO_Init,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	MX_GPIO_Init:
  25              	.LFB71:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****  ******************************************************************************
   4:Core/Src/main.c ****  * @file           : main.c
   5:Core/Src/main.c ****  * @brief          : Main program body
   6:Core/Src/main.c ****  ******************************************************************************
   7:Core/Src/main.c ****  * @attention
   8:Core/Src/main.c ****  *
   9:Core/Src/main.c ****  * Copyright (c) 2023 STMicroelectronics.
  10:Core/Src/main.c ****  * All rights reserved.
  11:Core/Src/main.c ****  *
  12:Core/Src/main.c ****  * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****  * in the root directory of this software component.
  14:Core/Src/main.c ****  * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****  *
  16:Core/Src/main.c ****  ******************************************************************************
  17:Core/Src/main.c ****  */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** #include "software_time.h"
  25:Core/Src/main.c **** /* USER CODE END Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* USER CODE END PTD */
  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/main.c **** /* USER CODE BEGIN PD */
ARM GAS  C:\Users\phong\AppData\Local\Temp\cckTNfl2.s 			page 2


  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* USER CODE END PD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  38:Core/Src/main.c **** /* USER CODE BEGIN PM */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* USER CODE END PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  43:Core/Src/main.c **** TIM_HandleTypeDef htim2;
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** /* USER CODE BEGIN PV */
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** /* USER CODE END PV */
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  50:Core/Src/main.c **** void SystemClock_Config(void);
  51:Core/Src/main.c **** static void MX_GPIO_Init(void);
  52:Core/Src/main.c **** static void MX_TIM2_Init(void);
  53:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** /* USER CODE END PFP */
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  58:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  59:Core/Src/main.c **** uint16_t pinArr[] = {LED1_Pin, LED2_Pin, LED3_Pin, LED4_Pin, LED5_Pin,
  60:Core/Src/main.c ****                      LED6_Pin, LED7_Pin, LED8_Pin, LED9_Pin, LED10_Pin, LED11_Pin, LED12_Pin};
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** GPIO_TypeDef *portArr[] = {LED1_GPIO_Port, LED2_GPIO_Port, LED3_GPIO_Port, LED4_GPIO_Port,
  63:Core/Src/main.c ****                            LED5_GPIO_Port, LED6_GPIO_Port, LED7_GPIO_Port, LED8_GPIO_Port, LED9_GPI
  64:Core/Src/main.c ****                            LED10_GPIO_Port, LED11_GPIO_Port, LED12_GPIO_Port};
  65:Core/Src/main.c **** void clearAllCLock()
  66:Core/Src/main.c **** {
  67:Core/Src/main.c ****   HAL_GPIO_WritePin(portArr[0], pinArr[0], 1);
  68:Core/Src/main.c ****   HAL_GPIO_WritePin(portArr[1], pinArr[1], 1);
  69:Core/Src/main.c ****   HAL_GPIO_WritePin(portArr[2], pinArr[2], 1);
  70:Core/Src/main.c ****   HAL_GPIO_WritePin(portArr[3], pinArr[3], 1);
  71:Core/Src/main.c ****   HAL_GPIO_WritePin(portArr[4], pinArr[4], 1);
  72:Core/Src/main.c ****   HAL_GPIO_WritePin(portArr[5], pinArr[5], 1);
  73:Core/Src/main.c ****   HAL_GPIO_WritePin(portArr[6], pinArr[6], 1);
  74:Core/Src/main.c ****   HAL_GPIO_WritePin(portArr[7], pinArr[7], 1);
  75:Core/Src/main.c ****   HAL_GPIO_WritePin(portArr[8], pinArr[8], 1);
  76:Core/Src/main.c ****   HAL_GPIO_WritePin(portArr[9], pinArr[9], 1);
  77:Core/Src/main.c ****   HAL_GPIO_WritePin(portArr[10], pinArr[10], 1);
  78:Core/Src/main.c ****   HAL_GPIO_WritePin(portArr[11], pinArr[11], 1);
  79:Core/Src/main.c **** }
  80:Core/Src/main.c **** void setNumberOnClock(int num)
  81:Core/Src/main.c **** {
  82:Core/Src/main.c ****   HAL_GPIO_WritePin(portArr[num], pinArr[num], 0);
  83:Core/Src/main.c **** }
  84:Core/Src/main.c **** void clearNumberOnClock(int num)
  85:Core/Src/main.c **** {
  86:Core/Src/main.c ****   HAL_GPIO_WritePin(portArr[num], pinArr[num], 1);
  87:Core/Src/main.c **** }
  88:Core/Src/main.c **** 
  89:Core/Src/main.c **** /* USER CODE END 0 */
  90:Core/Src/main.c **** 
ARM GAS  C:\Users\phong\AppData\Local\Temp\cckTNfl2.s 			page 3


  91:Core/Src/main.c **** /**
  92:Core/Src/main.c ****  * @brief  The application entry point.
  93:Core/Src/main.c ****  * @retval int
  94:Core/Src/main.c ****  */
  95:Core/Src/main.c **** int main(void)
  96:Core/Src/main.c **** {
  97:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  98:Core/Src/main.c **** 
  99:Core/Src/main.c ****   /* USER CODE END 1 */
 100:Core/Src/main.c **** 
 101:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 102:Core/Src/main.c **** 
 103:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 104:Core/Src/main.c ****   HAL_Init();
 105:Core/Src/main.c **** 
 106:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 107:Core/Src/main.c **** 
 108:Core/Src/main.c ****   /* USER CODE END Init */
 109:Core/Src/main.c **** 
 110:Core/Src/main.c ****   /* Configure the system clock */
 111:Core/Src/main.c ****   SystemClock_Config();
 112:Core/Src/main.c **** 
 113:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 114:Core/Src/main.c **** 
 115:Core/Src/main.c ****   /* USER CODE END SysInit */
 116:Core/Src/main.c **** 
 117:Core/Src/main.c ****   /* Initialize all configured peripherals */
 118:Core/Src/main.c ****   MX_GPIO_Init();
 119:Core/Src/main.c ****   MX_TIM2_Init();
 120:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 121:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim2);
 122:Core/Src/main.c ****   /* USER CODE END 2 */
 123:Core/Src/main.c **** 
 124:Core/Src/main.c ****   /* Infinite loop */
 125:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 126:Core/Src/main.c ****   clearAllCLock();
 127:Core/Src/main.c ****   int second = 30, minute = 59, hour = 23;
 128:Core/Src/main.c ****   second /= 5;
 129:Core/Src/main.c ****   minute /= 5;
 130:Core/Src/main.c ****   hour /= 2;
 131:Core/Src/main.c ****   setNumberOnClock(second);
 132:Core/Src/main.c ****   setNumberOnClock(minute);
 133:Core/Src/main.c ****   setNumberOnClock(hour);
 134:Core/Src/main.c ****   int timer = 100;
 135:Core/Src/main.c ****   int count = 4;
 136:Core/Src/main.c ****   setTimer1(timer);
 137:Core/Src/main.c ****   while (1)
 138:Core/Src/main.c ****   {
 139:Core/Src/main.c ****     if (timer1_flag == 1)
 140:Core/Src/main.c ****     {
 141:Core/Src/main.c ****       if (count != 0)
 142:Core/Src/main.c ****       {
 143:Core/Src/main.c ****         count--;
 144:Core/Src/main.c ****       }
 145:Core/Src/main.c ****       else
 146:Core/Src/main.c ****       {
 147:Core/Src/main.c ****         count = 4;
ARM GAS  C:\Users\phong\AppData\Local\Temp\cckTNfl2.s 			page 4


 148:Core/Src/main.c ****         if (second != minute && second != hour)
 149:Core/Src/main.c ****         {
 150:Core/Src/main.c ****           clearNumberOnClock(second);
 151:Core/Src/main.c ****         }
 152:Core/Src/main.c ****         second++;
 153:Core/Src/main.c ****         if (second > 11)
 154:Core/Src/main.c ****         {
 155:Core/Src/main.c ****           second = 0;
 156:Core/Src/main.c ****           clearNumberOnClock(minute);
 157:Core/Src/main.c ****           minute++;
 158:Core/Src/main.c ****         }
 159:Core/Src/main.c ****         if (minute > 11)
 160:Core/Src/main.c ****         {
 161:Core/Src/main.c ****           minute = 0;
 162:Core/Src/main.c ****           clearNumberOnClock(hour);
 163:Core/Src/main.c ****           hour++;
 164:Core/Src/main.c ****         }
 165:Core/Src/main.c ****         if (hour > 11)
 166:Core/Src/main.c ****           hour = 0;
 167:Core/Src/main.c ****         setNumberOnClock(hour);
 168:Core/Src/main.c ****         setNumberOnClock(minute);
 169:Core/Src/main.c ****         setNumberOnClock(second);
 170:Core/Src/main.c ****       }
 171:Core/Src/main.c ****       setTimer1(timer);
 172:Core/Src/main.c ****     }
 173:Core/Src/main.c ****     /* USER CODE END WHILE */
 174:Core/Src/main.c **** 
 175:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 176:Core/Src/main.c ****   }
 177:Core/Src/main.c ****   /* USER CODE END 3 */
 178:Core/Src/main.c **** }
 179:Core/Src/main.c **** 
 180:Core/Src/main.c **** /**
 181:Core/Src/main.c ****  * @brief System Clock Configuration
 182:Core/Src/main.c ****  * @retval None
 183:Core/Src/main.c ****  */
 184:Core/Src/main.c **** void SystemClock_Config(void)
 185:Core/Src/main.c **** {
 186:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 187:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 188:Core/Src/main.c **** 
 189:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 190:Core/Src/main.c ****    * in the RCC_OscInitTypeDef structure.
 191:Core/Src/main.c ****    */
 192:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 193:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 194:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 195:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 196:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 197:Core/Src/main.c ****   {
 198:Core/Src/main.c ****     Error_Handler();
 199:Core/Src/main.c ****   }
 200:Core/Src/main.c **** 
 201:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 202:Core/Src/main.c ****    */
 203:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | R
 204:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
ARM GAS  C:\Users\phong\AppData\Local\Temp\cckTNfl2.s 			page 5


 205:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 206:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 207:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 208:Core/Src/main.c **** 
 209:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 210:Core/Src/main.c ****   {
 211:Core/Src/main.c ****     Error_Handler();
 212:Core/Src/main.c ****   }
 213:Core/Src/main.c **** }
 214:Core/Src/main.c **** 
 215:Core/Src/main.c **** /**
 216:Core/Src/main.c ****  * @brief TIM2 Initialization Function
 217:Core/Src/main.c ****  * @param None
 218:Core/Src/main.c ****  * @retval None
 219:Core/Src/main.c ****  */
 220:Core/Src/main.c **** static void MX_TIM2_Init(void)
 221:Core/Src/main.c **** {
 222:Core/Src/main.c **** 
 223:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 0 */
 224:Core/Src/main.c **** 
 225:Core/Src/main.c ****   /* USER CODE END TIM2_Init 0 */
 226:Core/Src/main.c **** 
 227:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 228:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 229:Core/Src/main.c **** 
 230:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 1 */
 231:Core/Src/main.c **** 
 232:Core/Src/main.c ****   /* USER CODE END TIM2_Init 1 */
 233:Core/Src/main.c ****   htim2.Instance = TIM2;
 234:Core/Src/main.c ****   htim2.Init.Prescaler = 7999;
 235:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 236:Core/Src/main.c ****   htim2.Init.Period = 9;
 237:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 238:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 239:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 240:Core/Src/main.c ****   {
 241:Core/Src/main.c ****     Error_Handler();
 242:Core/Src/main.c ****   }
 243:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 244:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 245:Core/Src/main.c ****   {
 246:Core/Src/main.c ****     Error_Handler();
 247:Core/Src/main.c ****   }
 248:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 249:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 250:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 251:Core/Src/main.c ****   {
 252:Core/Src/main.c ****     Error_Handler();
 253:Core/Src/main.c ****   }
 254:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 2 */
 255:Core/Src/main.c **** 
 256:Core/Src/main.c ****   /* USER CODE END TIM2_Init 2 */
 257:Core/Src/main.c **** }
 258:Core/Src/main.c **** 
 259:Core/Src/main.c **** /**
 260:Core/Src/main.c ****  * @brief GPIO Initialization Function
 261:Core/Src/main.c ****  * @param None
ARM GAS  C:\Users\phong\AppData\Local\Temp\cckTNfl2.s 			page 6


 262:Core/Src/main.c ****  * @retval None
 263:Core/Src/main.c ****  */
 264:Core/Src/main.c **** static void MX_GPIO_Init(void)
 265:Core/Src/main.c **** {
  26              		.loc 1 265 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 24
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 30B5     		push	{r4, r5, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 12
  33              		.cfi_offset 4, -12
  34              		.cfi_offset 5, -8
  35              		.cfi_offset 14, -4
  36 0002 87B0     		sub	sp, sp, #28
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 40
 266:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  39              		.loc 1 266 3 view .LVU1
  40              		.loc 1 266 20 is_stmt 0 view .LVU2
  41 0004 0024     		movs	r4, #0
  42 0006 0294     		str	r4, [sp, #8]
  43 0008 0394     		str	r4, [sp, #12]
  44 000a 0494     		str	r4, [sp, #16]
  45 000c 0594     		str	r4, [sp, #20]
 267:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_1 */
 268:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_1 */
 269:Core/Src/main.c **** 
 270:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 271:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  46              		.loc 1 271 3 is_stmt 1 view .LVU3
  47              	.LBB4:
  48              		.loc 1 271 3 view .LVU4
  49              		.loc 1 271 3 view .LVU5
  50 000e 0F4B     		ldr	r3, .L3
  51 0010 9A69     		ldr	r2, [r3, #24]
  52 0012 42F00402 		orr	r2, r2, #4
  53 0016 9A61     		str	r2, [r3, #24]
  54              		.loc 1 271 3 view .LVU6
  55 0018 9B69     		ldr	r3, [r3, #24]
  56 001a 03F00403 		and	r3, r3, #4
  57 001e 0193     		str	r3, [sp, #4]
  58              		.loc 1 271 3 view .LVU7
  59 0020 019B     		ldr	r3, [sp, #4]
  60              	.LBE4:
  61              		.loc 1 271 3 view .LVU8
 272:Core/Src/main.c **** 
 273:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 274:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, LED1_Pin | LED2_Pin | LED3_Pin | LED4_Pin | LED5_Pin | LED6_Pin | LED7_P
  62              		.loc 1 274 3 view .LVU9
  63 0022 0B4D     		ldr	r5, .L3+4
  64 0024 2246     		mov	r2, r4
  65 0026 4FF6F071 		movw	r1, #65520
  66 002a 2846     		mov	r0, r5
  67 002c FFF7FEFF 		bl	HAL_GPIO_WritePin
  68              	.LVL0:
 275:Core/Src/main.c **** 
ARM GAS  C:\Users\phong\AppData\Local\Temp\cckTNfl2.s 			page 7


 276:Core/Src/main.c ****   /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
 277:Core/Src/main.c ****                            LED5_Pin LED6_Pin LED7_Pin LED8_Pin
 278:Core/Src/main.c ****                            LED9_Pin LED10_Pin LED11_Pin LED12_Pin */
 279:Core/Src/main.c ****   GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin | LED4_Pin | LED5_Pin | LED6_Pin | LED7_Pin 
  69              		.loc 1 279 3 view .LVU10
  70              		.loc 1 279 23 is_stmt 0 view .LVU11
  71 0030 4FF6F073 		movw	r3, #65520
  72 0034 0293     		str	r3, [sp, #8]
 280:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  73              		.loc 1 280 3 is_stmt 1 view .LVU12
  74              		.loc 1 280 24 is_stmt 0 view .LVU13
  75 0036 0123     		movs	r3, #1
  76 0038 0393     		str	r3, [sp, #12]
 281:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  77              		.loc 1 281 3 is_stmt 1 view .LVU14
  78              		.loc 1 281 24 is_stmt 0 view .LVU15
  79 003a 0494     		str	r4, [sp, #16]
 282:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  80              		.loc 1 282 3 is_stmt 1 view .LVU16
  81              		.loc 1 282 25 is_stmt 0 view .LVU17
  82 003c 0223     		movs	r3, #2
  83 003e 0593     		str	r3, [sp, #20]
 283:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  84              		.loc 1 283 3 is_stmt 1 view .LVU18
  85 0040 02A9     		add	r1, sp, #8
  86 0042 2846     		mov	r0, r5
  87 0044 FFF7FEFF 		bl	HAL_GPIO_Init
  88              	.LVL1:
 284:Core/Src/main.c **** 
 285:Core/Src/main.c ****   /* USER CODE BEGIN MX_GPIO_Init_2 */
 286:Core/Src/main.c ****   /* USER CODE END MX_GPIO_Init_2 */
 287:Core/Src/main.c **** }
  89              		.loc 1 287 1 is_stmt 0 view .LVU19
  90 0048 07B0     		add	sp, sp, #28
  91              	.LCFI2:
  92              		.cfi_def_cfa_offset 12
  93              		@ sp needed
  94 004a 30BD     		pop	{r4, r5, pc}
  95              	.L4:
  96              		.align	2
  97              	.L3:
  98 004c 00100240 		.word	1073876992
  99 0050 00080140 		.word	1073809408
 100              		.cfi_endproc
 101              	.LFE71:
 103              		.section	.text.clearAllCLock,"ax",%progbits
 104              		.align	1
 105              		.global	clearAllCLock
 106              		.syntax unified
 107              		.thumb
 108              		.thumb_func
 110              	clearAllCLock:
 111              	.LFB65:
  66:Core/Src/main.c ****   HAL_GPIO_WritePin(portArr[0], pinArr[0], 1);
 112              		.loc 1 66 1 is_stmt 1 view -0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\phong\AppData\Local\Temp\cckTNfl2.s 			page 8


 115              		@ frame_needed = 0, uses_anonymous_args = 0
 116 0000 38B5     		push	{r3, r4, r5, lr}
 117              	.LCFI3:
 118              		.cfi_def_cfa_offset 16
 119              		.cfi_offset 3, -16
 120              		.cfi_offset 4, -12
 121              		.cfi_offset 5, -8
 122              		.cfi_offset 14, -4
  67:Core/Src/main.c ****   HAL_GPIO_WritePin(portArr[1], pinArr[1], 1);
 123              		.loc 1 67 3 view .LVU21
 124 0002 1F4D     		ldr	r5, .L7
 125 0004 1F4C     		ldr	r4, .L7+4
 126 0006 0122     		movs	r2, #1
 127 0008 2988     		ldrh	r1, [r5]
 128 000a 2068     		ldr	r0, [r4]
 129 000c FFF7FEFF 		bl	HAL_GPIO_WritePin
 130              	.LVL2:
  68:Core/Src/main.c ****   HAL_GPIO_WritePin(portArr[2], pinArr[2], 1);
 131              		.loc 1 68 3 view .LVU22
 132 0010 0122     		movs	r2, #1
 133 0012 6988     		ldrh	r1, [r5, #2]
 134 0014 6068     		ldr	r0, [r4, #4]
 135 0016 FFF7FEFF 		bl	HAL_GPIO_WritePin
 136              	.LVL3:
  69:Core/Src/main.c ****   HAL_GPIO_WritePin(portArr[3], pinArr[3], 1);
 137              		.loc 1 69 3 view .LVU23
 138 001a 0122     		movs	r2, #1
 139 001c A988     		ldrh	r1, [r5, #4]
 140 001e A068     		ldr	r0, [r4, #8]
 141 0020 FFF7FEFF 		bl	HAL_GPIO_WritePin
 142              	.LVL4:
  70:Core/Src/main.c ****   HAL_GPIO_WritePin(portArr[4], pinArr[4], 1);
 143              		.loc 1 70 3 view .LVU24
 144 0024 0122     		movs	r2, #1
 145 0026 E988     		ldrh	r1, [r5, #6]
 146 0028 E068     		ldr	r0, [r4, #12]
 147 002a FFF7FEFF 		bl	HAL_GPIO_WritePin
 148              	.LVL5:
  71:Core/Src/main.c ****   HAL_GPIO_WritePin(portArr[5], pinArr[5], 1);
 149              		.loc 1 71 3 view .LVU25
 150 002e 0122     		movs	r2, #1
 151 0030 2989     		ldrh	r1, [r5, #8]
 152 0032 2069     		ldr	r0, [r4, #16]
 153 0034 FFF7FEFF 		bl	HAL_GPIO_WritePin
 154              	.LVL6:
  72:Core/Src/main.c ****   HAL_GPIO_WritePin(portArr[6], pinArr[6], 1);
 155              		.loc 1 72 3 view .LVU26
 156 0038 0122     		movs	r2, #1
 157 003a 6989     		ldrh	r1, [r5, #10]
 158 003c 6069     		ldr	r0, [r4, #20]
 159 003e FFF7FEFF 		bl	HAL_GPIO_WritePin
 160              	.LVL7:
  73:Core/Src/main.c ****   HAL_GPIO_WritePin(portArr[7], pinArr[7], 1);
 161              		.loc 1 73 3 view .LVU27
 162 0042 0122     		movs	r2, #1
 163 0044 A989     		ldrh	r1, [r5, #12]
 164 0046 A069     		ldr	r0, [r4, #24]
ARM GAS  C:\Users\phong\AppData\Local\Temp\cckTNfl2.s 			page 9


 165 0048 FFF7FEFF 		bl	HAL_GPIO_WritePin
 166              	.LVL8:
  74:Core/Src/main.c ****   HAL_GPIO_WritePin(portArr[8], pinArr[8], 1);
 167              		.loc 1 74 3 view .LVU28
 168 004c 0122     		movs	r2, #1
 169 004e E989     		ldrh	r1, [r5, #14]
 170 0050 E069     		ldr	r0, [r4, #28]
 171 0052 FFF7FEFF 		bl	HAL_GPIO_WritePin
 172              	.LVL9:
  75:Core/Src/main.c ****   HAL_GPIO_WritePin(portArr[9], pinArr[9], 1);
 173              		.loc 1 75 3 view .LVU29
 174 0056 0122     		movs	r2, #1
 175 0058 298A     		ldrh	r1, [r5, #16]
 176 005a 206A     		ldr	r0, [r4, #32]
 177 005c FFF7FEFF 		bl	HAL_GPIO_WritePin
 178              	.LVL10:
  76:Core/Src/main.c ****   HAL_GPIO_WritePin(portArr[10], pinArr[10], 1);
 179              		.loc 1 76 3 view .LVU30
 180 0060 0122     		movs	r2, #1
 181 0062 698A     		ldrh	r1, [r5, #18]
 182 0064 606A     		ldr	r0, [r4, #36]
 183 0066 FFF7FEFF 		bl	HAL_GPIO_WritePin
 184              	.LVL11:
  77:Core/Src/main.c ****   HAL_GPIO_WritePin(portArr[11], pinArr[11], 1);
 185              		.loc 1 77 3 view .LVU31
 186 006a 0122     		movs	r2, #1
 187 006c A98A     		ldrh	r1, [r5, #20]
 188 006e A06A     		ldr	r0, [r4, #40]
 189 0070 FFF7FEFF 		bl	HAL_GPIO_WritePin
 190              	.LVL12:
  78:Core/Src/main.c **** }
 191              		.loc 1 78 3 view .LVU32
 192 0074 0122     		movs	r2, #1
 193 0076 E98A     		ldrh	r1, [r5, #22]
 194 0078 E06A     		ldr	r0, [r4, #44]
 195 007a FFF7FEFF 		bl	HAL_GPIO_WritePin
 196              	.LVL13:
  79:Core/Src/main.c **** void setNumberOnClock(int num)
 197              		.loc 1 79 1 is_stmt 0 view .LVU33
 198 007e 38BD     		pop	{r3, r4, r5, pc}
 199              	.L8:
 200              		.align	2
 201              	.L7:
 202 0080 00000000 		.word	pinArr
 203 0084 00000000 		.word	portArr
 204              		.cfi_endproc
 205              	.LFE65:
 207              		.section	.text.setNumberOnClock,"ax",%progbits
 208              		.align	1
 209              		.global	setNumberOnClock
 210              		.syntax unified
 211              		.thumb
 212              		.thumb_func
 214              	setNumberOnClock:
 215              	.LVL14:
 216              	.LFB66:
  81:Core/Src/main.c ****   HAL_GPIO_WritePin(portArr[num], pinArr[num], 0);
ARM GAS  C:\Users\phong\AppData\Local\Temp\cckTNfl2.s 			page 10


 217              		.loc 1 81 1 is_stmt 1 view -0
 218              		.cfi_startproc
 219              		@ args = 0, pretend = 0, frame = 0
 220              		@ frame_needed = 0, uses_anonymous_args = 0
  81:Core/Src/main.c ****   HAL_GPIO_WritePin(portArr[num], pinArr[num], 0);
 221              		.loc 1 81 1 is_stmt 0 view .LVU35
 222 0000 08B5     		push	{r3, lr}
 223              	.LCFI4:
 224              		.cfi_def_cfa_offset 8
 225              		.cfi_offset 3, -8
 226              		.cfi_offset 14, -4
  82:Core/Src/main.c **** }
 227              		.loc 1 82 3 is_stmt 1 view .LVU36
 228 0002 0022     		movs	r2, #0
 229 0004 044B     		ldr	r3, .L11
 230 0006 33F81010 		ldrh	r1, [r3, r0, lsl #1]
 231 000a 044B     		ldr	r3, .L11+4
 232 000c 53F82000 		ldr	r0, [r3, r0, lsl #2]
 233              	.LVL15:
  82:Core/Src/main.c **** }
 234              		.loc 1 82 3 is_stmt 0 view .LVU37
 235 0010 FFF7FEFF 		bl	HAL_GPIO_WritePin
 236              	.LVL16:
  83:Core/Src/main.c **** void clearNumberOnClock(int num)
 237              		.loc 1 83 1 view .LVU38
 238 0014 08BD     		pop	{r3, pc}
 239              	.L12:
 240 0016 00BF     		.align	2
 241              	.L11:
 242 0018 00000000 		.word	pinArr
 243 001c 00000000 		.word	portArr
 244              		.cfi_endproc
 245              	.LFE66:
 247              		.section	.text.clearNumberOnClock,"ax",%progbits
 248              		.align	1
 249              		.global	clearNumberOnClock
 250              		.syntax unified
 251              		.thumb
 252              		.thumb_func
 254              	clearNumberOnClock:
 255              	.LVL17:
 256              	.LFB67:
  85:Core/Src/main.c ****   HAL_GPIO_WritePin(portArr[num], pinArr[num], 1);
 257              		.loc 1 85 1 is_stmt 1 view -0
 258              		.cfi_startproc
 259              		@ args = 0, pretend = 0, frame = 0
 260              		@ frame_needed = 0, uses_anonymous_args = 0
  85:Core/Src/main.c ****   HAL_GPIO_WritePin(portArr[num], pinArr[num], 1);
 261              		.loc 1 85 1 is_stmt 0 view .LVU40
 262 0000 08B5     		push	{r3, lr}
 263              	.LCFI5:
 264              		.cfi_def_cfa_offset 8
 265              		.cfi_offset 3, -8
 266              		.cfi_offset 14, -4
  86:Core/Src/main.c **** }
 267              		.loc 1 86 3 is_stmt 1 view .LVU41
 268 0002 0122     		movs	r2, #1
ARM GAS  C:\Users\phong\AppData\Local\Temp\cckTNfl2.s 			page 11


 269 0004 044B     		ldr	r3, .L15
 270 0006 33F81010 		ldrh	r1, [r3, r0, lsl #1]
 271 000a 044B     		ldr	r3, .L15+4
 272 000c 53F82000 		ldr	r0, [r3, r0, lsl #2]
 273              	.LVL18:
  86:Core/Src/main.c **** }
 274              		.loc 1 86 3 is_stmt 0 view .LVU42
 275 0010 FFF7FEFF 		bl	HAL_GPIO_WritePin
 276              	.LVL19:
  87:Core/Src/main.c **** 
 277              		.loc 1 87 1 view .LVU43
 278 0014 08BD     		pop	{r3, pc}
 279              	.L16:
 280 0016 00BF     		.align	2
 281              	.L15:
 282 0018 00000000 		.word	pinArr
 283 001c 00000000 		.word	portArr
 284              		.cfi_endproc
 285              	.LFE67:
 287              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 288              		.align	1
 289              		.global	HAL_TIM_PeriodElapsedCallback
 290              		.syntax unified
 291              		.thumb
 292              		.thumb_func
 294              	HAL_TIM_PeriodElapsedCallback:
 295              	.LVL20:
 296              	.LFB72:
 288:Core/Src/main.c **** 
 289:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 290:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 291:Core/Src/main.c **** {
 297              		.loc 1 291 1 is_stmt 1 view -0
 298              		.cfi_startproc
 299              		@ args = 0, pretend = 0, frame = 0
 300              		@ frame_needed = 0, uses_anonymous_args = 0
 301              		.loc 1 291 1 is_stmt 0 view .LVU45
 302 0000 08B5     		push	{r3, lr}
 303              	.LCFI6:
 304              		.cfi_def_cfa_offset 8
 305              		.cfi_offset 3, -8
 306              		.cfi_offset 14, -4
 292:Core/Src/main.c ****   timerRun();
 307              		.loc 1 292 3 is_stmt 1 view .LVU46
 308 0002 FFF7FEFF 		bl	timerRun
 309              	.LVL21:
 293:Core/Src/main.c **** }
 310              		.loc 1 293 1 is_stmt 0 view .LVU47
 311 0006 08BD     		pop	{r3, pc}
 312              		.cfi_endproc
 313              	.LFE72:
 315              		.section	.text.Error_Handler,"ax",%progbits
 316              		.align	1
 317              		.global	Error_Handler
 318              		.syntax unified
 319              		.thumb
 320              		.thumb_func
ARM GAS  C:\Users\phong\AppData\Local\Temp\cckTNfl2.s 			page 12


 322              	Error_Handler:
 323              	.LFB73:
 294:Core/Src/main.c **** /* USER CODE END 4 */
 295:Core/Src/main.c **** 
 296:Core/Src/main.c **** /**
 297:Core/Src/main.c ****  * @brief  This function is executed in case of error occurrence.
 298:Core/Src/main.c ****  * @retval None
 299:Core/Src/main.c ****  */
 300:Core/Src/main.c **** void Error_Handler(void)
 301:Core/Src/main.c **** {
 324              		.loc 1 301 1 is_stmt 1 view -0
 325              		.cfi_startproc
 326              		@ Volatile: function does not return.
 327              		@ args = 0, pretend = 0, frame = 0
 328              		@ frame_needed = 0, uses_anonymous_args = 0
 329              		@ link register save eliminated.
 302:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 303:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 304:Core/Src/main.c ****   __disable_irq();
 330              		.loc 1 304 3 view .LVU49
 331              	.LBB5:
 332              	.LBI5:
 333              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
ARM GAS  C:\Users\phong\AppData\Local\Temp\cckTNfl2.s 			page 13


  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
ARM GAS  C:\Users\phong\AppData\Local\Temp\cckTNfl2.s 			page 14


  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 334              		.loc 2 140 27 view .LVU50
 335              	.LBB6:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 336              		.loc 2 142 3 view .LVU51
 337              		.syntax unified
 338              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 339 0000 72B6     		cpsid i
ARM GAS  C:\Users\phong\AppData\Local\Temp\cckTNfl2.s 			page 15


 340              	@ 0 "" 2
 341              		.thumb
 342              		.syntax unified
 343              	.L20:
 344              	.LBE6:
 345              	.LBE5:
 305:Core/Src/main.c ****   while (1)
 346              		.loc 1 305 3 discriminator 1 view .LVU52
 306:Core/Src/main.c ****   {
 307:Core/Src/main.c ****   }
 347              		.loc 1 307 3 discriminator 1 view .LVU53
 305:Core/Src/main.c ****   while (1)
 348              		.loc 1 305 9 discriminator 1 view .LVU54
 349 0002 FEE7     		b	.L20
 350              		.cfi_endproc
 351              	.LFE73:
 353              		.section	.text.MX_TIM2_Init,"ax",%progbits
 354              		.align	1
 355              		.syntax unified
 356              		.thumb
 357              		.thumb_func
 359              	MX_TIM2_Init:
 360              	.LFB70:
 221:Core/Src/main.c **** 
 361              		.loc 1 221 1 view -0
 362              		.cfi_startproc
 363              		@ args = 0, pretend = 0, frame = 24
 364              		@ frame_needed = 0, uses_anonymous_args = 0
 365 0000 00B5     		push	{lr}
 366              	.LCFI7:
 367              		.cfi_def_cfa_offset 4
 368              		.cfi_offset 14, -4
 369 0002 87B0     		sub	sp, sp, #28
 370              	.LCFI8:
 371              		.cfi_def_cfa_offset 32
 227:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 372              		.loc 1 227 3 view .LVU56
 227:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 373              		.loc 1 227 26 is_stmt 0 view .LVU57
 374 0004 0023     		movs	r3, #0
 375 0006 0293     		str	r3, [sp, #8]
 376 0008 0393     		str	r3, [sp, #12]
 377 000a 0493     		str	r3, [sp, #16]
 378 000c 0593     		str	r3, [sp, #20]
 228:Core/Src/main.c **** 
 379              		.loc 1 228 3 is_stmt 1 view .LVU58
 228:Core/Src/main.c **** 
 380              		.loc 1 228 27 is_stmt 0 view .LVU59
 381 000e 0093     		str	r3, [sp]
 382 0010 0193     		str	r3, [sp, #4]
 233:Core/Src/main.c ****   htim2.Init.Prescaler = 7999;
 383              		.loc 1 233 3 is_stmt 1 view .LVU60
 233:Core/Src/main.c ****   htim2.Init.Prescaler = 7999;
 384              		.loc 1 233 18 is_stmt 0 view .LVU61
 385 0012 1448     		ldr	r0, .L29
 386 0014 4FF08042 		mov	r2, #1073741824
 387 0018 0260     		str	r2, [r0]
ARM GAS  C:\Users\phong\AppData\Local\Temp\cckTNfl2.s 			page 16


 234:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 388              		.loc 1 234 3 is_stmt 1 view .LVU62
 234:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 389              		.loc 1 234 24 is_stmt 0 view .LVU63
 390 001a 41F63F72 		movw	r2, #7999
 391 001e 4260     		str	r2, [r0, #4]
 235:Core/Src/main.c ****   htim2.Init.Period = 9;
 392              		.loc 1 235 3 is_stmt 1 view .LVU64
 235:Core/Src/main.c ****   htim2.Init.Period = 9;
 393              		.loc 1 235 26 is_stmt 0 view .LVU65
 394 0020 8360     		str	r3, [r0, #8]
 236:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 395              		.loc 1 236 3 is_stmt 1 view .LVU66
 236:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 396              		.loc 1 236 21 is_stmt 0 view .LVU67
 397 0022 0922     		movs	r2, #9
 398 0024 C260     		str	r2, [r0, #12]
 237:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 399              		.loc 1 237 3 is_stmt 1 view .LVU68
 237:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 400              		.loc 1 237 28 is_stmt 0 view .LVU69
 401 0026 0361     		str	r3, [r0, #16]
 238:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 402              		.loc 1 238 3 is_stmt 1 view .LVU70
 238:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 403              		.loc 1 238 32 is_stmt 0 view .LVU71
 404 0028 8361     		str	r3, [r0, #24]
 239:Core/Src/main.c ****   {
 405              		.loc 1 239 3 is_stmt 1 view .LVU72
 239:Core/Src/main.c ****   {
 406              		.loc 1 239 7 is_stmt 0 view .LVU73
 407 002a FFF7FEFF 		bl	HAL_TIM_Base_Init
 408              	.LVL22:
 239:Core/Src/main.c ****   {
 409              		.loc 1 239 6 view .LVU74
 410 002e 90B9     		cbnz	r0, .L26
 243:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 411              		.loc 1 243 3 is_stmt 1 view .LVU75
 243:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 412              		.loc 1 243 34 is_stmt 0 view .LVU76
 413 0030 4FF48053 		mov	r3, #4096
 414 0034 0293     		str	r3, [sp, #8]
 244:Core/Src/main.c ****   {
 415              		.loc 1 244 3 is_stmt 1 view .LVU77
 244:Core/Src/main.c ****   {
 416              		.loc 1 244 7 is_stmt 0 view .LVU78
 417 0036 02A9     		add	r1, sp, #8
 418 0038 0A48     		ldr	r0, .L29
 419 003a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 420              	.LVL23:
 244:Core/Src/main.c ****   {
 421              		.loc 1 244 6 view .LVU79
 422 003e 60B9     		cbnz	r0, .L27
 248:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 423              		.loc 1 248 3 is_stmt 1 view .LVU80
 248:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 424              		.loc 1 248 37 is_stmt 0 view .LVU81
ARM GAS  C:\Users\phong\AppData\Local\Temp\cckTNfl2.s 			page 17


 425 0040 0023     		movs	r3, #0
 426 0042 0093     		str	r3, [sp]
 249:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 427              		.loc 1 249 3 is_stmt 1 view .LVU82
 249:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 428              		.loc 1 249 33 is_stmt 0 view .LVU83
 429 0044 0193     		str	r3, [sp, #4]
 250:Core/Src/main.c ****   {
 430              		.loc 1 250 3 is_stmt 1 view .LVU84
 250:Core/Src/main.c ****   {
 431              		.loc 1 250 7 is_stmt 0 view .LVU85
 432 0046 6946     		mov	r1, sp
 433 0048 0648     		ldr	r0, .L29
 434 004a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 435              	.LVL24:
 250:Core/Src/main.c ****   {
 436              		.loc 1 250 6 view .LVU86
 437 004e 30B9     		cbnz	r0, .L28
 257:Core/Src/main.c **** 
 438              		.loc 1 257 1 view .LVU87
 439 0050 07B0     		add	sp, sp, #28
 440              	.LCFI9:
 441              		.cfi_remember_state
 442              		.cfi_def_cfa_offset 4
 443              		@ sp needed
 444 0052 5DF804FB 		ldr	pc, [sp], #4
 445              	.L26:
 446              	.LCFI10:
 447              		.cfi_restore_state
 241:Core/Src/main.c ****   }
 448              		.loc 1 241 5 is_stmt 1 view .LVU88
 449 0056 FFF7FEFF 		bl	Error_Handler
 450              	.LVL25:
 451              	.L27:
 246:Core/Src/main.c ****   }
 452              		.loc 1 246 5 view .LVU89
 453 005a FFF7FEFF 		bl	Error_Handler
 454              	.LVL26:
 455              	.L28:
 252:Core/Src/main.c ****   }
 456              		.loc 1 252 5 view .LVU90
 457 005e FFF7FEFF 		bl	Error_Handler
 458              	.LVL27:
 459              	.L30:
 460 0062 00BF     		.align	2
 461              	.L29:
 462 0064 00000000 		.word	htim2
 463              		.cfi_endproc
 464              	.LFE70:
 466              		.section	.text.SystemClock_Config,"ax",%progbits
 467              		.align	1
 468              		.global	SystemClock_Config
 469              		.syntax unified
 470              		.thumb
 471              		.thumb_func
 473              	SystemClock_Config:
 474              	.LFB69:
ARM GAS  C:\Users\phong\AppData\Local\Temp\cckTNfl2.s 			page 18


 185:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 475              		.loc 1 185 1 view -0
 476              		.cfi_startproc
 477              		@ args = 0, pretend = 0, frame = 64
 478              		@ frame_needed = 0, uses_anonymous_args = 0
 479 0000 00B5     		push	{lr}
 480              	.LCFI11:
 481              		.cfi_def_cfa_offset 4
 482              		.cfi_offset 14, -4
 483 0002 91B0     		sub	sp, sp, #68
 484              	.LCFI12:
 485              		.cfi_def_cfa_offset 72
 186:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 486              		.loc 1 186 3 view .LVU92
 186:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 487              		.loc 1 186 22 is_stmt 0 view .LVU93
 488 0004 2822     		movs	r2, #40
 489 0006 0021     		movs	r1, #0
 490 0008 06A8     		add	r0, sp, #24
 491 000a FFF7FEFF 		bl	memset
 492              	.LVL28:
 187:Core/Src/main.c **** 
 493              		.loc 1 187 3 is_stmt 1 view .LVU94
 187:Core/Src/main.c **** 
 494              		.loc 1 187 22 is_stmt 0 view .LVU95
 495 000e 0023     		movs	r3, #0
 496 0010 0193     		str	r3, [sp, #4]
 497 0012 0293     		str	r3, [sp, #8]
 498 0014 0393     		str	r3, [sp, #12]
 499 0016 0493     		str	r3, [sp, #16]
 500 0018 0593     		str	r3, [sp, #20]
 192:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 501              		.loc 1 192 3 is_stmt 1 view .LVU96
 192:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 502              		.loc 1 192 36 is_stmt 0 view .LVU97
 503 001a 0223     		movs	r3, #2
 504 001c 0693     		str	r3, [sp, #24]
 193:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 505              		.loc 1 193 3 is_stmt 1 view .LVU98
 193:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 506              		.loc 1 193 30 is_stmt 0 view .LVU99
 507 001e 0123     		movs	r3, #1
 508 0020 0A93     		str	r3, [sp, #40]
 194:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 509              		.loc 1 194 3 is_stmt 1 view .LVU100
 194:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 510              		.loc 1 194 41 is_stmt 0 view .LVU101
 511 0022 1023     		movs	r3, #16
 512 0024 0B93     		str	r3, [sp, #44]
 195:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 513              		.loc 1 195 3 is_stmt 1 view .LVU102
 196:Core/Src/main.c ****   {
 514              		.loc 1 196 3 view .LVU103
 196:Core/Src/main.c ****   {
 515              		.loc 1 196 7 is_stmt 0 view .LVU104
 516 0026 06A8     		add	r0, sp, #24
 517 0028 FFF7FEFF 		bl	HAL_RCC_OscConfig
ARM GAS  C:\Users\phong\AppData\Local\Temp\cckTNfl2.s 			page 19


 518              	.LVL29:
 196:Core/Src/main.c ****   {
 519              		.loc 1 196 6 view .LVU105
 520 002c 68B9     		cbnz	r0, .L35
 203:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 521              		.loc 1 203 3 is_stmt 1 view .LVU106
 203:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 522              		.loc 1 203 31 is_stmt 0 view .LVU107
 523 002e 0F23     		movs	r3, #15
 524 0030 0193     		str	r3, [sp, #4]
 204:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 525              		.loc 1 204 3 is_stmt 1 view .LVU108
 204:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 526              		.loc 1 204 34 is_stmt 0 view .LVU109
 527 0032 0021     		movs	r1, #0
 528 0034 0291     		str	r1, [sp, #8]
 205:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 529              		.loc 1 205 3 is_stmt 1 view .LVU110
 205:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 530              		.loc 1 205 35 is_stmt 0 view .LVU111
 531 0036 0391     		str	r1, [sp, #12]
 206:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 532              		.loc 1 206 3 is_stmt 1 view .LVU112
 206:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 533              		.loc 1 206 36 is_stmt 0 view .LVU113
 534 0038 0491     		str	r1, [sp, #16]
 207:Core/Src/main.c **** 
 535              		.loc 1 207 3 is_stmt 1 view .LVU114
 207:Core/Src/main.c **** 
 536              		.loc 1 207 36 is_stmt 0 view .LVU115
 537 003a 0591     		str	r1, [sp, #20]
 209:Core/Src/main.c ****   {
 538              		.loc 1 209 3 is_stmt 1 view .LVU116
 209:Core/Src/main.c ****   {
 539              		.loc 1 209 7 is_stmt 0 view .LVU117
 540 003c 01A8     		add	r0, sp, #4
 541 003e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 542              	.LVL30:
 209:Core/Src/main.c ****   {
 543              		.loc 1 209 6 view .LVU118
 544 0042 20B9     		cbnz	r0, .L36
 213:Core/Src/main.c **** 
 545              		.loc 1 213 1 view .LVU119
 546 0044 11B0     		add	sp, sp, #68
 547              	.LCFI13:
 548              		.cfi_remember_state
 549              		.cfi_def_cfa_offset 4
 550              		@ sp needed
 551 0046 5DF804FB 		ldr	pc, [sp], #4
 552              	.L35:
 553              	.LCFI14:
 554              		.cfi_restore_state
 198:Core/Src/main.c ****   }
 555              		.loc 1 198 5 is_stmt 1 view .LVU120
 556 004a FFF7FEFF 		bl	Error_Handler
 557              	.LVL31:
 558              	.L36:
ARM GAS  C:\Users\phong\AppData\Local\Temp\cckTNfl2.s 			page 20


 211:Core/Src/main.c ****   }
 559              		.loc 1 211 5 view .LVU121
 560 004e FFF7FEFF 		bl	Error_Handler
 561              	.LVL32:
 562              		.cfi_endproc
 563              	.LFE69:
 565              		.section	.text.main,"ax",%progbits
 566              		.align	1
 567              		.global	main
 568              		.syntax unified
 569              		.thumb
 570              		.thumb_func
 572              	main:
 573              	.LFB68:
  96:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 574              		.loc 1 96 1 view -0
 575              		.cfi_startproc
 576              		@ args = 0, pretend = 0, frame = 0
 577              		@ frame_needed = 0, uses_anonymous_args = 0
 578 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 579              	.LCFI15:
 580              		.cfi_def_cfa_offset 24
 581              		.cfi_offset 3, -24
 582              		.cfi_offset 4, -20
 583              		.cfi_offset 5, -16
 584              		.cfi_offset 6, -12
 585              		.cfi_offset 7, -8
 586              		.cfi_offset 14, -4
 104:Core/Src/main.c **** 
 587              		.loc 1 104 3 view .LVU123
 588 0002 FFF7FEFF 		bl	HAL_Init
 589              	.LVL33:
 111:Core/Src/main.c **** 
 590              		.loc 1 111 3 view .LVU124
 591 0006 FFF7FEFF 		bl	SystemClock_Config
 592              	.LVL34:
 118:Core/Src/main.c ****   MX_TIM2_Init();
 593              		.loc 1 118 3 view .LVU125
 594 000a FFF7FEFF 		bl	MX_GPIO_Init
 595              	.LVL35:
 119:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 596              		.loc 1 119 3 view .LVU126
 597 000e FFF7FEFF 		bl	MX_TIM2_Init
 598              	.LVL36:
 121:Core/Src/main.c ****   /* USER CODE END 2 */
 599              		.loc 1 121 3 view .LVU127
 600 0012 2448     		ldr	r0, .L50
 601 0014 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 602              	.LVL37:
 126:Core/Src/main.c ****   int second = 30, minute = 59, hour = 23;
 603              		.loc 1 126 3 view .LVU128
 604 0018 FFF7FEFF 		bl	clearAllCLock
 605              	.LVL38:
 127:Core/Src/main.c ****   second /= 5;
 606              		.loc 1 127 3 view .LVU129
 128:Core/Src/main.c ****   minute /= 5;
 607              		.loc 1 128 3 view .LVU130
ARM GAS  C:\Users\phong\AppData\Local\Temp\cckTNfl2.s 			page 21


 129:Core/Src/main.c ****   hour /= 2;
 608              		.loc 1 129 3 view .LVU131
 130:Core/Src/main.c ****   setNumberOnClock(second);
 609              		.loc 1 130 3 view .LVU132
 131:Core/Src/main.c ****   setNumberOnClock(minute);
 610              		.loc 1 131 3 view .LVU133
 611 001c 0620     		movs	r0, #6
 612 001e FFF7FEFF 		bl	setNumberOnClock
 613              	.LVL39:
 132:Core/Src/main.c ****   setNumberOnClock(hour);
 614              		.loc 1 132 3 view .LVU134
 615 0022 0B20     		movs	r0, #11
 616 0024 FFF7FEFF 		bl	setNumberOnClock
 617              	.LVL40:
 133:Core/Src/main.c ****   int timer = 100;
 618              		.loc 1 133 3 view .LVU135
 619 0028 0B20     		movs	r0, #11
 620 002a FFF7FEFF 		bl	setNumberOnClock
 621              	.LVL41:
 134:Core/Src/main.c ****   int count = 4;
 622              		.loc 1 134 3 view .LVU136
 135:Core/Src/main.c ****   setTimer1(timer);
 623              		.loc 1 135 3 view .LVU137
 136:Core/Src/main.c ****   while (1)
 624              		.loc 1 136 3 view .LVU138
 625 002e 6420     		movs	r0, #100
 626 0030 FFF7FEFF 		bl	setTimer1
 627              	.LVL42:
 135:Core/Src/main.c ****   setTimer1(timer);
 628              		.loc 1 135 7 is_stmt 0 view .LVU139
 629 0034 0424     		movs	r4, #4
 130:Core/Src/main.c ****   setNumberOnClock(second);
 630              		.loc 1 130 8 view .LVU140
 631 0036 0B27     		movs	r7, #11
 129:Core/Src/main.c ****   hour /= 2;
 632              		.loc 1 129 10 view .LVU141
 633 0038 3E46     		mov	r6, r7
 128:Core/Src/main.c ****   minute /= 5;
 634              		.loc 1 128 10 view .LVU142
 635 003a 0625     		movs	r5, #6
 636 003c 19E0     		b	.L38
 637              	.LVL43:
 638              	.L39:
 147:Core/Src/main.c ****         if (second != minute && second != hour)
 639              		.loc 1 147 9 is_stmt 1 view .LVU143
 148:Core/Src/main.c ****         {
 640              		.loc 1 148 9 view .LVU144
 148:Core/Src/main.c ****         {
 641              		.loc 1 148 12 is_stmt 0 view .LVU145
 642 003e B542     		cmp	r5, r6
 643 0040 01D0     		beq	.L41
 148:Core/Src/main.c ****         {
 644              		.loc 1 148 30 discriminator 1 view .LVU146
 645 0042 BD42     		cmp	r5, r7
 646 0044 1DD1     		bne	.L47
 647              	.L41:
 152:Core/Src/main.c ****         if (second > 11)
ARM GAS  C:\Users\phong\AppData\Local\Temp\cckTNfl2.s 			page 22


 648              		.loc 1 152 9 is_stmt 1 view .LVU147
 152:Core/Src/main.c ****         if (second > 11)
 649              		.loc 1 152 15 is_stmt 0 view .LVU148
 650 0046 0135     		adds	r5, r5, #1
 651              	.LVL44:
 153:Core/Src/main.c ****         {
 652              		.loc 1 153 9 is_stmt 1 view .LVU149
 153:Core/Src/main.c ****         {
 653              		.loc 1 153 12 is_stmt 0 view .LVU150
 654 0048 0B2D     		cmp	r5, #11
 655 004a 1EDC     		bgt	.L48
 656              	.LVL45:
 657              	.L42:
 159:Core/Src/main.c ****         {
 658              		.loc 1 159 9 is_stmt 1 view .LVU151
 159:Core/Src/main.c ****         {
 659              		.loc 1 159 12 is_stmt 0 view .LVU152
 660 004c 0B2E     		cmp	r6, #11
 661 004e 22DC     		bgt	.L49
 662              	.LVL46:
 663              	.L43:
 165:Core/Src/main.c ****           hour = 0;
 664              		.loc 1 165 9 is_stmt 1 view .LVU153
 165:Core/Src/main.c ****           hour = 0;
 665              		.loc 1 165 12 is_stmt 0 view .LVU154
 666 0050 0B2F     		cmp	r7, #11
 667 0052 00DC     		bgt	.L44
 165:Core/Src/main.c ****           hour = 0;
 668              		.loc 1 165 12 view .LVU155
 669 0054 3C46     		mov	r4, r7
 670              	.L44:
 671              	.LVL47:
 167:Core/Src/main.c ****         setNumberOnClock(minute);
 672              		.loc 1 167 9 is_stmt 1 view .LVU156
 673 0056 2046     		mov	r0, r4
 674 0058 FFF7FEFF 		bl	setNumberOnClock
 675              	.LVL48:
 168:Core/Src/main.c ****         setNumberOnClock(second);
 676              		.loc 1 168 9 view .LVU157
 677 005c 3046     		mov	r0, r6
 678 005e FFF7FEFF 		bl	setNumberOnClock
 679              	.LVL49:
 169:Core/Src/main.c ****       }
 680              		.loc 1 169 9 view .LVU158
 681 0062 2846     		mov	r0, r5
 682 0064 FFF7FEFF 		bl	setNumberOnClock
 683              	.LVL50:
 684 0068 2746     		mov	r7, r4
 147:Core/Src/main.c ****         if (second != minute && second != hour)
 685              		.loc 1 147 15 is_stmt 0 view .LVU159
 686 006a 0424     		movs	r4, #4
 687              	.LVL51:
 688              	.L40:
 171:Core/Src/main.c ****     }
 689              		.loc 1 171 7 is_stmt 1 view .LVU160
 690 006c 6420     		movs	r0, #100
 691 006e FFF7FEFF 		bl	setTimer1
ARM GAS  C:\Users\phong\AppData\Local\Temp\cckTNfl2.s 			page 23


 692              	.LVL52:
 693              	.L38:
 137:Core/Src/main.c ****   {
 694              		.loc 1 137 3 view .LVU161
 139:Core/Src/main.c ****     {
 695              		.loc 1 139 5 view .LVU162
 139:Core/Src/main.c ****     {
 696              		.loc 1 139 21 is_stmt 0 view .LVU163
 697 0072 0D4B     		ldr	r3, .L50+4
 698 0074 1B68     		ldr	r3, [r3]
 139:Core/Src/main.c ****     {
 699              		.loc 1 139 8 view .LVU164
 700 0076 012B     		cmp	r3, #1
 701 0078 FBD1     		bne	.L38
 141:Core/Src/main.c ****       {
 702              		.loc 1 141 7 is_stmt 1 view .LVU165
 141:Core/Src/main.c ****       {
 703              		.loc 1 141 10 is_stmt 0 view .LVU166
 704 007a 002C     		cmp	r4, #0
 705 007c DFD0     		beq	.L39
 143:Core/Src/main.c ****       }
 706              		.loc 1 143 9 is_stmt 1 view .LVU167
 143:Core/Src/main.c ****       }
 707              		.loc 1 143 14 is_stmt 0 view .LVU168
 708 007e 013C     		subs	r4, r4, #1
 709              	.LVL53:
 143:Core/Src/main.c ****       }
 710              		.loc 1 143 14 view .LVU169
 711 0080 F4E7     		b	.L40
 712              	.LVL54:
 713              	.L47:
 150:Core/Src/main.c ****         }
 714              		.loc 1 150 11 is_stmt 1 view .LVU170
 715 0082 2846     		mov	r0, r5
 716 0084 FFF7FEFF 		bl	clearNumberOnClock
 717              	.LVL55:
 718 0088 DDE7     		b	.L41
 719              	.L48:
 155:Core/Src/main.c ****           clearNumberOnClock(minute);
 720              		.loc 1 155 11 view .LVU171
 721              	.LVL56:
 156:Core/Src/main.c ****           minute++;
 722              		.loc 1 156 11 view .LVU172
 723 008a 3046     		mov	r0, r6
 724 008c FFF7FEFF 		bl	clearNumberOnClock
 725              	.LVL57:
 157:Core/Src/main.c ****         }
 726              		.loc 1 157 11 view .LVU173
 157:Core/Src/main.c ****         }
 727              		.loc 1 157 17 is_stmt 0 view .LVU174
 728 0090 0136     		adds	r6, r6, #1
 729              	.LVL58:
 155:Core/Src/main.c ****           clearNumberOnClock(minute);
 730              		.loc 1 155 18 view .LVU175
 731 0092 2546     		mov	r5, r4
 732 0094 DAE7     		b	.L42
 733              	.LVL59:
ARM GAS  C:\Users\phong\AppData\Local\Temp\cckTNfl2.s 			page 24


 734              	.L49:
 161:Core/Src/main.c ****           clearNumberOnClock(hour);
 735              		.loc 1 161 11 is_stmt 1 view .LVU176
 162:Core/Src/main.c ****           hour++;
 736              		.loc 1 162 11 view .LVU177
 737 0096 3846     		mov	r0, r7
 738 0098 FFF7FEFF 		bl	clearNumberOnClock
 739              	.LVL60:
 163:Core/Src/main.c ****         }
 740              		.loc 1 163 11 view .LVU178
 163:Core/Src/main.c ****         }
 741              		.loc 1 163 15 is_stmt 0 view .LVU179
 742 009c 0137     		adds	r7, r7, #1
 743              	.LVL61:
 161:Core/Src/main.c ****           clearNumberOnClock(hour);
 744              		.loc 1 161 18 view .LVU180
 745 009e 2646     		mov	r6, r4
 746 00a0 D6E7     		b	.L43
 747              	.L51:
 748 00a2 00BF     		.align	2
 749              	.L50:
 750 00a4 00000000 		.word	htim2
 751 00a8 00000000 		.word	timer1_flag
 752              		.cfi_endproc
 753              	.LFE68:
 755              		.global	portArr
 756              		.section	.data.portArr,"aw"
 757              		.align	2
 760              	portArr:
 761 0000 00080140 		.word	1073809408
 762 0004 00080140 		.word	1073809408
 763 0008 00080140 		.word	1073809408
 764 000c 00080140 		.word	1073809408
 765 0010 00080140 		.word	1073809408
 766 0014 00080140 		.word	1073809408
 767 0018 00080140 		.word	1073809408
 768 001c 00080140 		.word	1073809408
 769 0020 00080140 		.word	1073809408
 770 0024 00080140 		.word	1073809408
 771 0028 00080140 		.word	1073809408
 772 002c 00080140 		.word	1073809408
 773              		.global	pinArr
 774              		.section	.data.pinArr,"aw"
 775              		.align	2
 778              	pinArr:
 779 0000 1000     		.short	16
 780 0002 2000     		.short	32
 781 0004 4000     		.short	64
 782 0006 8000     		.short	128
 783 0008 0001     		.short	256
 784 000a 0002     		.short	512
 785 000c 0004     		.short	1024
 786 000e 0008     		.short	2048
 787 0010 0010     		.short	4096
 788 0012 0020     		.short	8192
 789 0014 0040     		.short	16384
 790 0016 0080     		.short	-32768
ARM GAS  C:\Users\phong\AppData\Local\Temp\cckTNfl2.s 			page 25


 791              		.global	htim2
 792              		.section	.bss.htim2,"aw",%nobits
 793              		.align	2
 796              	htim2:
 797 0000 00000000 		.space	72
 797      00000000 
 797      00000000 
 797      00000000 
 797      00000000 
 798              		.text
 799              	.Letext0:
 800              		.file 3 "d:\\armgnu\\12.3 rel1\\arm-none-eabi\\include\\machine\\_default_types.h"
 801              		.file 4 "d:\\armgnu\\12.3 rel1\\arm-none-eabi\\include\\sys\\_stdint.h"
 802              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103x6.h"
 803              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 804              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 805              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 806              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 807              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 808              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 809              		.file 12 "Core/Inc/software_time.h"
 810              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim_ex.h"
 811              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 812              		.file 15 "<built-in>"
ARM GAS  C:\Users\phong\AppData\Local\Temp\cckTNfl2.s 			page 26


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\phong\AppData\Local\Temp\cckTNfl2.s:19     .text.MX_GPIO_Init:00000000 $t
C:\Users\phong\AppData\Local\Temp\cckTNfl2.s:24     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\phong\AppData\Local\Temp\cckTNfl2.s:98     .text.MX_GPIO_Init:0000004c $d
C:\Users\phong\AppData\Local\Temp\cckTNfl2.s:104    .text.clearAllCLock:00000000 $t
C:\Users\phong\AppData\Local\Temp\cckTNfl2.s:110    .text.clearAllCLock:00000000 clearAllCLock
C:\Users\phong\AppData\Local\Temp\cckTNfl2.s:202    .text.clearAllCLock:00000080 $d
C:\Users\phong\AppData\Local\Temp\cckTNfl2.s:778    .data.pinArr:00000000 pinArr
C:\Users\phong\AppData\Local\Temp\cckTNfl2.s:760    .data.portArr:00000000 portArr
C:\Users\phong\AppData\Local\Temp\cckTNfl2.s:208    .text.setNumberOnClock:00000000 $t
C:\Users\phong\AppData\Local\Temp\cckTNfl2.s:214    .text.setNumberOnClock:00000000 setNumberOnClock
C:\Users\phong\AppData\Local\Temp\cckTNfl2.s:242    .text.setNumberOnClock:00000018 $d
C:\Users\phong\AppData\Local\Temp\cckTNfl2.s:248    .text.clearNumberOnClock:00000000 $t
C:\Users\phong\AppData\Local\Temp\cckTNfl2.s:254    .text.clearNumberOnClock:00000000 clearNumberOnClock
C:\Users\phong\AppData\Local\Temp\cckTNfl2.s:282    .text.clearNumberOnClock:00000018 $d
C:\Users\phong\AppData\Local\Temp\cckTNfl2.s:288    .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
C:\Users\phong\AppData\Local\Temp\cckTNfl2.s:294    .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
C:\Users\phong\AppData\Local\Temp\cckTNfl2.s:316    .text.Error_Handler:00000000 $t
C:\Users\phong\AppData\Local\Temp\cckTNfl2.s:322    .text.Error_Handler:00000000 Error_Handler
C:\Users\phong\AppData\Local\Temp\cckTNfl2.s:354    .text.MX_TIM2_Init:00000000 $t
C:\Users\phong\AppData\Local\Temp\cckTNfl2.s:359    .text.MX_TIM2_Init:00000000 MX_TIM2_Init
C:\Users\phong\AppData\Local\Temp\cckTNfl2.s:462    .text.MX_TIM2_Init:00000064 $d
C:\Users\phong\AppData\Local\Temp\cckTNfl2.s:796    .bss.htim2:00000000 htim2
C:\Users\phong\AppData\Local\Temp\cckTNfl2.s:467    .text.SystemClock_Config:00000000 $t
C:\Users\phong\AppData\Local\Temp\cckTNfl2.s:473    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\phong\AppData\Local\Temp\cckTNfl2.s:566    .text.main:00000000 $t
C:\Users\phong\AppData\Local\Temp\cckTNfl2.s:572    .text.main:00000000 main
C:\Users\phong\AppData\Local\Temp\cckTNfl2.s:750    .text.main:000000a4 $d
C:\Users\phong\AppData\Local\Temp\cckTNfl2.s:757    .data.portArr:00000000 $d
C:\Users\phong\AppData\Local\Temp\cckTNfl2.s:775    .data.pinArr:00000000 $d
C:\Users\phong\AppData\Local\Temp\cckTNfl2.s:793    .bss.htim2:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
timerRun
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_TIM_Base_Start_IT
setTimer1
timer1_flag
